// <copyright file="6_t4IntegrationTestGenerate.cs" company="marcos software">
// This file may not be redistributed in whole or significant part
// and is subject to the marcos software license.
//
// @author: Sascha Manns, s.manns@marcossoftware.com
// @copyright: 2022, marcos-software, http://www.marcos-software.de
// </copyright>



// —————————————— 
// <auto-generated> 
//	This code was auto-generated 07/18/2022 12:21:49
//	T4 template generates test code 
//	NOTE:T4 generated code may need additional updates/addjustments by developer in order to compile a solution.
// <auto-generated> 
// —————————————–
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using AppLicenseserver.Api;
using AppLicenseserver.Domain;
using IdentityModel.Client;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.TestHost;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Xunit;
using static JWT.Controllers.TokenController;

namespace AppLicenseserver.Test
{
	#region unit tests
	#region License tests

	/// <summary>
	///
	/// License API Integration tests
	///
	/// MANUAL UPDATES REQUIRED!
	///
	/// NOTE: In order to run an pass these scaffolded tests they have to be manually adjusted 
	///       according to new entity class properties - search for MANUAL UPDATES REQUIRED!
	///
	/// </summary>
	[Collection("HttpClient collection")]
	public class LicenseTest : BaseTest
	{
		public HttpClientFixture fixture;
		public LicenseTest(HttpClientFixture fixture)
		{
			this.fixture = fixture;
			var client = fixture.Client;
		}

		public static string LastAddedLicense { get; set; }

		#region License tests

		[Fact]
		public async Task license_getall()
		{
			var httpclient = fixture.Client;
			if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
			//
			var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
			var licenseid = await util.addLicense(httpclient);
			//
			httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
			var response = await httpclient.GetAsync("/api/license");
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.OK, response.StatusCode);
			var jsonString = await response.Content.ReadAsStringAsync();
			var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
			Assert.True(vmenititys.Count > 0);
			// lazy-loading test if entity has children
			response = await httpclient.GetAsync("/api/license/" + licenseid.ToString());
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.OK, response.StatusCode);
			jsonString = await response.Content.ReadAsStringAsync();
			var vmenitity = JsonConvert.DeserializeObject<LicenseViewModel>(jsonString);
			//Assert.True(vmenitity.Kids.Count == 1);
			//clean
			await util.removeLicense(httpclient, licenseid);
			//remove if any parent entity added 
		}


		[Fact]
		public async Task license_add_update_delete()
		{
			var httpclient = fixture.Client; ;
			if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
			//
			LicenseViewModel license = new LicenseViewModel
			{
				//MANUAL UPDATES REQUIRED!
				TestText = "tt updated"
						,
				ProductId = 0,
				UserId = 0
			};

			httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
			var response = await httpclient.PostAsync("/api/license", new StringContent(
															   JsonConvert.SerializeObject(license), Encoding.UTF8, "application/json"));
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.Created, response.StatusCode);
			var lastAddedId = await response.Content.ReadAsStringAsync();
			Assert.True(int.Parse(lastAddedId) > 1);
			int id = 0; int.TryParse(lastAddedId, out id);

			//get inserted
			var util = new UtilityExt();
			var vmentity = await util.GetLicense(httpclient, id);

			//update test
			vmentity.TestText = "tt updated";
			response = await httpclient.PutAsync("/api/license/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

			//confirm update
			response = await httpclient.GetAsync("/api/license/" + id.ToString());
			response.EnsureSuccessStatusCode();
			var jsonString = await response.Content.ReadAsStringAsync();
			var oj = JObject.Parse(jsonString);
			var tt = oj["testText"].ToString();
			Assert.Equal(tt, vmentity.TestText);

			//another update with same License - concurrency
			vmentity.TestText = "tt updated 2";
			response = await httpclient.PutAsync("/api/license/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
			Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

			//delete test 
			response = await httpclient.DeleteAsync("/api/license/" + id.ToString());
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
		}

		[Fact]
		public async Task license_getbyid()
		{
			var httpclient = fixture.Client;
			if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
			//
			var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
			var licenseid = await util.addLicense(httpclient);
			//
			httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
			var response = await httpclient.GetAsync("/api/license/" + licenseid.ToString());
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.OK, response.StatusCode);
			var jsonString = await response.Content.ReadAsStringAsync();
			var vmenitity = JsonConvert.DeserializeObject<LicenseViewModel>(jsonString);
			Assert.True(vmenitity.TestText == "tt updated");

			//clean
			await util.removeLicense(httpclient, licenseid);
			//remove if any parent entity added 
		}

		#endregion

		#region License async tests

		[Fact]
		public async Task license_getallasync()
		{
			var httpclient = fixture.Client;
			if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
			//
			var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
			var licenseid = await util.addLicense(httpclient);
			//
			httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
			var response = await httpclient.GetAsync("/api/licenseasync");
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.OK, response.StatusCode);
			var jsonString = await response.Content.ReadAsStringAsync();
			var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
			Assert.True(vmenititys.Count > 0);
			// lazy-loading test if entity has children
			response = await httpclient.GetAsync("/api/licenseasync/" + licenseid.ToString());
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.OK, response.StatusCode);
			jsonString = await response.Content.ReadAsStringAsync();
			var vmenitity = JsonConvert.DeserializeObject<LicenseViewModel>(jsonString);
			//Assert.True(vmenitity.Kids.Count == 1);
			//clean
			await util.removeLicense(httpclient, licenseid);
			//remove if any parent entity added 
		}


		[Fact]
		public async Task license_add_update_delete_async()
		{
			var httpclient = fixture.Client; ;
			if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
			//
			LicenseViewModel license = new LicenseViewModel
			{
				//MANUAL UPDATES REQUIRED!
				//initiate viewmodel object
				TestText = "tt updated"
						,
				ProductId = 0,
				UserId = 0
			};

			httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
			var response = await httpclient.PostAsync("/api/licenseasync", new StringContent(
															   JsonConvert.SerializeObject(license), Encoding.UTF8, "application/json"));
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.Created, response.StatusCode);
			var lastAddedId = await response.Content.ReadAsStringAsync();
			Assert.True(int.Parse(lastAddedId) > 1);
			int id = 0; int.TryParse(lastAddedId, out id);

			//get inserted
			var util = new UtilityExt();
			var vmentity = await util.GetLicense(httpclient, id);

			//update test
			vmentity.TestText = "tt updated";
			response = await httpclient.PutAsync("/api/licenseasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

			//confirm update
			response = await httpclient.GetAsync("/api/licenseasync/" + id.ToString());
			response.EnsureSuccessStatusCode();
			var jsonString = await response.Content.ReadAsStringAsync();
			var oj = JObject.Parse(jsonString);
			var tt = oj["testText"].ToString();
			Assert.Equal(tt, vmentity.TestText);

			//another update with same License - concurrency
			vmentity.TestText = "tt updated 2";
			response = await httpclient.PutAsync("/api/licenseasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
			Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

			//delete test 
			response = await httpclient.DeleteAsync("/api/licenseasync/" + id.ToString());
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);

		}

		[Fact]
		public async Task license_getbyidasync()
		{

			var httpclient = fixture.Client;
			if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
			//
			var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
			var licenseid = await util.addLicense(httpclient);
			//
			httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
			var response = await httpclient.GetAsync("/api/licenseasync/" + licenseid.ToString());
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.OK, response.StatusCode);
			var jsonString = await response.Content.ReadAsStringAsync();
			var vmenitity = JsonConvert.DeserializeObject<LicenseViewModel>(jsonString);
			Assert.True(vmenitity.TestText == "tt updated");

			//clean
			await util.removeLicense(httpclient, licenseid);
			//remove if any parent entity added 
		}

		#endregion
	}
	#endregion
	#region Product tests

	/// <summary>
	///
	/// Product API Integration tests
	///
	/// MANUAL UPDATES REQUIRED!
	///
	/// NOTE: In order to run an pass these scaffolded tests they have to be manually adjusted 
	///       according to new entity class properties - search for MANUAL UPDATES REQUIRED!
	///
	/// </summary>
	[Collection("HttpClient collection")]
	public class ProductTest : BaseTest
	{
		public HttpClientFixture fixture;
		public ProductTest(HttpClientFixture fixture)
		{
			this.fixture = fixture;
			var client = fixture.Client;
		}

		public static string LastAddedProduct { get; set; }

		#region Product tests

		[Fact]
		public async Task product_getall()
		{
			var httpclient = fixture.Client;
			if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
			//
			var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
			var productid = await util.addProduct(httpclient);
			//
			httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
			var response = await httpclient.GetAsync("/api/product");
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.OK, response.StatusCode);
			var jsonString = await response.Content.ReadAsStringAsync();
			var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
			Assert.True(vmenititys.Count > 0);
			// lazy-loading test if entity has children
			response = await httpclient.GetAsync("/api/product/" + productid.ToString());
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.OK, response.StatusCode);
			jsonString = await response.Content.ReadAsStringAsync();
			var vmenitity = JsonConvert.DeserializeObject<ProductViewModel>(jsonString);
			//Assert.True(vmenitity.Kids.Count == 1);
			//clean
			await util.removeProduct(httpclient, productid);
			//remove if any parent entity added 
		}


		[Fact]
		public async Task product_add_update_delete()
		{
			var httpclient = fixture.Client; ;
			if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
			//
			ProductViewModel product = new ProductViewModel
			{
				//MANUAL UPDATES REQUIRED!
				TestText = "tt updated"

			};

			httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
			var response = await httpclient.PostAsync("/api/product", new StringContent(
															   JsonConvert.SerializeObject(product), Encoding.UTF8, "application/json"));
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.Created, response.StatusCode);
			var lastAddedId = await response.Content.ReadAsStringAsync();
			Assert.True(int.Parse(lastAddedId) > 1);
			int id = 0; int.TryParse(lastAddedId, out id);

			//get inserted
			var util = new UtilityExt();
			var vmentity = await util.GetProduct(httpclient, id);

			//update test
			vmentity.TestText = "tt updated";
			response = await httpclient.PutAsync("/api/product/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

			//confirm update
			response = await httpclient.GetAsync("/api/product/" + id.ToString());
			response.EnsureSuccessStatusCode();
			var jsonString = await response.Content.ReadAsStringAsync();
			var oj = JObject.Parse(jsonString);
			var tt = oj["testText"].ToString();
			Assert.Equal(tt, vmentity.TestText);

			//another update with same Product - concurrency
			vmentity.TestText = "tt updated 2";
			response = await httpclient.PutAsync("/api/product/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
			Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

			//delete test 
			response = await httpclient.DeleteAsync("/api/product/" + id.ToString());
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
		}

		[Fact]
		public async Task product_getbyid()
		{
			var httpclient = fixture.Client;
			if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
			//
			var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
			var productid = await util.addProduct(httpclient);
			//
			httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
			var response = await httpclient.GetAsync("/api/product/" + productid.ToString());
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.OK, response.StatusCode);
			var jsonString = await response.Content.ReadAsStringAsync();
			var vmenitity = JsonConvert.DeserializeObject<ProductViewModel>(jsonString);
			Assert.True(vmenitity.TestText == "tt updated");

			//clean
			await util.removeProduct(httpclient, productid);
			//remove if any parent entity added 
		}

		#endregion

		#region Product async tests

		[Fact]
		public async Task product_getallasync()
		{
			var httpclient = fixture.Client;
			if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
			//
			var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
			var productid = await util.addProduct(httpclient);
			//
			httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
			var response = await httpclient.GetAsync("/api/productasync");
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.OK, response.StatusCode);
			var jsonString = await response.Content.ReadAsStringAsync();
			var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
			Assert.True(vmenititys.Count > 0);
			// lazy-loading test if entity has children
			response = await httpclient.GetAsync("/api/productasync/" + productid.ToString());
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.OK, response.StatusCode);
			jsonString = await response.Content.ReadAsStringAsync();
			var vmenitity = JsonConvert.DeserializeObject<ProductViewModel>(jsonString);
			//Assert.True(vmenitity.Kids.Count == 1);
			//clean
			await util.removeProduct(httpclient, productid);
			//remove if any parent entity added 
		}


		[Fact]
		public async Task product_add_update_delete_async()
		{
			var httpclient = fixture.Client; ;
			if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
			//
			ProductViewModel product = new ProductViewModel
			{
				//MANUAL UPDATES REQUIRED!
				//initiate viewmodel object
				TestText = "tt updated"

			};

			httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
			var response = await httpclient.PostAsync("/api/productasync", new StringContent(
															   JsonConvert.SerializeObject(product), Encoding.UTF8, "application/json"));
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.Created, response.StatusCode);
			var lastAddedId = await response.Content.ReadAsStringAsync();
			Assert.True(int.Parse(lastAddedId) > 1);
			int id = 0; int.TryParse(lastAddedId, out id);

			//get inserted
			var util = new UtilityExt();
			var vmentity = await util.GetProduct(httpclient, id);

			//update test
			vmentity.TestText = "tt updated";
			response = await httpclient.PutAsync("/api/productasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

			//confirm update
			response = await httpclient.GetAsync("/api/productasync/" + id.ToString());
			response.EnsureSuccessStatusCode();
			var jsonString = await response.Content.ReadAsStringAsync();
			var oj = JObject.Parse(jsonString);
			var tt = oj["testText"].ToString();
			Assert.Equal(tt, vmentity.TestText);

			//another update with same Product - concurrency
			vmentity.TestText = "tt updated 2";
			response = await httpclient.PutAsync("/api/productasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
			Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

			//delete test 
			response = await httpclient.DeleteAsync("/api/productasync/" + id.ToString());
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);

		}

		[Fact]
		public async Task product_getbyidasync()
		{

			var httpclient = fixture.Client;
			if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
			//
			var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
			var productid = await util.addProduct(httpclient);
			//
			httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
			var response = await httpclient.GetAsync("/api/productasync/" + productid.ToString());
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.OK, response.StatusCode);
			var jsonString = await response.Content.ReadAsStringAsync();
			var vmenitity = JsonConvert.DeserializeObject<ProductViewModel>(jsonString);
			Assert.True(vmenitity.TestText == "tt updated");

			//clean
			await util.removeProduct(httpclient, productid);
			//remove if any parent entity added 
		}

		#endregion
	}
	#endregion
	#region Telemetry tests

	/// <summary>
	///
	/// Telemetry API Integration tests
	///
	/// MANUAL UPDATES REQUIRED!
	///
	/// NOTE: In order to run an pass these scaffolded tests they have to be manually adjusted 
	///       according to new entity class properties - search for MANUAL UPDATES REQUIRED!
	///
	/// </summary>
	[Collection("HttpClient collection")]
	public class TelemetryTest : BaseTest
	{
		public HttpClientFixture fixture;
		public TelemetryTest(HttpClientFixture fixture)
		{
			this.fixture = fixture;
			var client = fixture.Client;
		}

		public static string LastAddedTelemetry { get; set; }

		#region Telemetry tests

		[Fact]
		public async Task telemetry_getall()
		{
			var httpclient = fixture.Client;
			if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
			//
			var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
			var telemetryid = await util.addTelemetry(httpclient);
			//
			httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
			var response = await httpclient.GetAsync("/api/telemetry");
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.OK, response.StatusCode);
			var jsonString = await response.Content.ReadAsStringAsync();
			var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
			Assert.True(vmenititys.Count > 0);
			// lazy-loading test if entity has children
			response = await httpclient.GetAsync("/api/telemetry/" + telemetryid.ToString());
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.OK, response.StatusCode);
			jsonString = await response.Content.ReadAsStringAsync();
			var vmenitity = JsonConvert.DeserializeObject<TelemetryViewModel>(jsonString);
			//Assert.True(vmenitity.Kids.Count == 1);
			//clean
			await util.removeTelemetry(httpclient, telemetryid);
			//remove if any parent entity added 
		}


		[Fact]
		public async Task telemetry_add_update_delete()
		{
			var httpclient = fixture.Client; ;
			if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
			//
			TelemetryViewModel telemetry = new TelemetryViewModel
			{
				//MANUAL UPDATES REQUIRED!
				TestText = "tt updated"
						,
				Ip = String.Empty,
				ProductId = 0,
				LicenseId = 0,
				UserId = 0
			};

			httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
			var response = await httpclient.PostAsync("/api/telemetry", new StringContent(
															   JsonConvert.SerializeObject(telemetry), Encoding.UTF8, "application/json"));
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.Created, response.StatusCode);
			var lastAddedId = await response.Content.ReadAsStringAsync();
			Assert.True(int.Parse(lastAddedId) > 1);
			int id = 0; int.TryParse(lastAddedId, out id);

			//get inserted
			var util = new UtilityExt();
			var vmentity = await util.GetTelemetry(httpclient, id);

			//update test
			vmentity.TestText = "tt updated";
			response = await httpclient.PutAsync("/api/telemetry/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

			//confirm update
			response = await httpclient.GetAsync("/api/telemetry/" + id.ToString());
			response.EnsureSuccessStatusCode();
			var jsonString = await response.Content.ReadAsStringAsync();
			var oj = JObject.Parse(jsonString);
			var tt = oj["testText"].ToString();
			Assert.Equal(tt, vmentity.TestText);

			//another update with same Telemetry - concurrency
			vmentity.TestText = "tt updated 2";
			response = await httpclient.PutAsync("/api/telemetry/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
			Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

			//delete test 
			response = await httpclient.DeleteAsync("/api/telemetry/" + id.ToString());
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
		}

		[Fact]
		public async Task telemetry_getbyid()
		{
			var httpclient = fixture.Client;
			if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
			//
			var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
			var telemetryid = await util.addTelemetry(httpclient);
			//
			httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
			var response = await httpclient.GetAsync("/api/telemetry/" + telemetryid.ToString());
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.OK, response.StatusCode);
			var jsonString = await response.Content.ReadAsStringAsync();
			var vmenitity = JsonConvert.DeserializeObject<TelemetryViewModel>(jsonString);
			Assert.True(vmenitity.TestText == "tt updated");

			//clean
			await util.removeTelemetry(httpclient, telemetryid);
			//remove if any parent entity added 
		}

		#endregion

		#region Telemetry async tests

		[Fact]
		public async Task telemetry_getallasync()
		{
			var httpclient = fixture.Client;
			if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
			//
			var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
			var telemetryid = await util.addTelemetry(httpclient);
			//
			httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
			var response = await httpclient.GetAsync("/api/telemetryasync");
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.OK, response.StatusCode);
			var jsonString = await response.Content.ReadAsStringAsync();
			var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
			Assert.True(vmenititys.Count > 0);
			// lazy-loading test if entity has children
			response = await httpclient.GetAsync("/api/telemetryasync/" + telemetryid.ToString());
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.OK, response.StatusCode);
			jsonString = await response.Content.ReadAsStringAsync();
			var vmenitity = JsonConvert.DeserializeObject<TelemetryViewModel>(jsonString);
			//Assert.True(vmenitity.Kids.Count == 1);
			//clean
			await util.removeTelemetry(httpclient, telemetryid);
			//remove if any parent entity added 
		}


		[Fact]
		public async Task telemetry_add_update_delete_async()
		{
			var httpclient = fixture.Client; ;
			if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
			//
			TelemetryViewModel telemetry = new TelemetryViewModel
			{
				//MANUAL UPDATES REQUIRED!
				//initiate viewmodel object
				TestText = "tt updated"
						,
				Ip = String.Empty,
				ProductId = 0,
				LicenseId = 0,
				UserId = 0
			};

			httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
			var response = await httpclient.PostAsync("/api/telemetryasync", new StringContent(
															   JsonConvert.SerializeObject(telemetry), Encoding.UTF8, "application/json"));
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.Created, response.StatusCode);
			var lastAddedId = await response.Content.ReadAsStringAsync();
			Assert.True(int.Parse(lastAddedId) > 1);
			int id = 0; int.TryParse(lastAddedId, out id);

			//get inserted
			var util = new UtilityExt();
			var vmentity = await util.GetTelemetry(httpclient, id);

			//update test
			vmentity.TestText = "tt updated";
			response = await httpclient.PutAsync("/api/telemetryasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

			//confirm update
			response = await httpclient.GetAsync("/api/telemetryasync/" + id.ToString());
			response.EnsureSuccessStatusCode();
			var jsonString = await response.Content.ReadAsStringAsync();
			var oj = JObject.Parse(jsonString);
			var tt = oj["testText"].ToString();
			Assert.Equal(tt, vmentity.TestText);

			//another update with same Telemetry - concurrency
			vmentity.TestText = "tt updated 2";
			response = await httpclient.PutAsync("/api/telemetryasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
			Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

			//delete test 
			response = await httpclient.DeleteAsync("/api/telemetryasync/" + id.ToString());
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);

		}

		[Fact]
		public async Task telemetry_getbyidasync()
		{

			var httpclient = fixture.Client;
			if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
			//
			var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
			var telemetryid = await util.addTelemetry(httpclient);
			//
			httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
			var response = await httpclient.GetAsync("/api/telemetryasync/" + telemetryid.ToString());
			response.EnsureSuccessStatusCode();
			Assert.Equal(HttpStatusCode.OK, response.StatusCode);
			var jsonString = await response.Content.ReadAsStringAsync();
			var vmenitity = JsonConvert.DeserializeObject<TelemetryViewModel>(jsonString);
			Assert.True(vmenitity.TestText == "tt updated");

			//clean
			await util.removeTelemetry(httpclient, telemetryid);
			//remove if any parent entity added 
		}

		#endregion
	}
	#endregion

	#endregion

	#region Shared test

	public class UtilityExt
	{

		public async Task<int> addLicense(HttpClient client)
		{

			LicenseViewModel vmentity = new LicenseViewModel
			{
				//MANUAL UPDATES REQUIRED!
				//initiate viewmodel object
				TestText = "tt updated"
						,
				ProductId = 0,
				UserId = 0
			};

			client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
			var response = await client.PostAsync("/api/license", new StringContent(
															   JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
			var jsonString = await response.Content.ReadAsStringAsync();
			int lastAdded = 0;
			int.TryParse(jsonString, out lastAdded);
			return lastAdded;
		}
		public async Task<LicenseViewModel> GetLicense(HttpClient client, int id)
		{
			client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
			var response = await client.GetAsync("/api/licenseasync/" + id.ToString());
			response.EnsureSuccessStatusCode();
			var jsonString = await response.Content.ReadAsStringAsync();
			var vmentity = JsonConvert.DeserializeObject<LicenseViewModel>(jsonString);
			return vmentity;
		}
		public async Task removeLicense(HttpClient client, int id)
		{
			await client.DeleteAsync("/api/license/" + id.ToString());
		}


		public async Task<int> addProduct(HttpClient client)
		{

			ProductViewModel vmentity = new ProductViewModel
			{
				//MANUAL UPDATES REQUIRED!
				//initiate viewmodel object
				TestText = "tt updated"

			};

			client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
			var response = await client.PostAsync("/api/product", new StringContent(
															   JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
			var jsonString = await response.Content.ReadAsStringAsync();
			int lastAdded = 0;
			int.TryParse(jsonString, out lastAdded);
			return lastAdded;
		}
		public async Task<ProductViewModel> GetProduct(HttpClient client, int id)
		{
			client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
			var response = await client.GetAsync("/api/productasync/" + id.ToString());
			response.EnsureSuccessStatusCode();
			var jsonString = await response.Content.ReadAsStringAsync();
			var vmentity = JsonConvert.DeserializeObject<ProductViewModel>(jsonString);
			return vmentity;
		}
		public async Task removeProduct(HttpClient client, int id)
		{
			await client.DeleteAsync("/api/product/" + id.ToString());
		}


		public async Task<int> addTelemetry(HttpClient client)
		{

			TelemetryViewModel vmentity = new TelemetryViewModel
			{
				//MANUAL UPDATES REQUIRED!
				//initiate viewmodel object
				TestText = "tt updated"
						,
				Ip = String.Empty,
				ProductId = 0,
				LicenseId = 0,
				UserId = 0
			};

			client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
			var response = await client.PostAsync("/api/telemetry", new StringContent(
															   JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
			var jsonString = await response.Content.ReadAsStringAsync();
			int lastAdded = 0;
			int.TryParse(jsonString, out lastAdded);
			return lastAdded;
		}
		public async Task<TelemetryViewModel> GetTelemetry(HttpClient client, int id)
		{
			client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
			var response = await client.GetAsync("/api/telemetryasync/" + id.ToString());
			response.EnsureSuccessStatusCode();
			var jsonString = await response.Content.ReadAsStringAsync();
			var vmentity = JsonConvert.DeserializeObject<TelemetryViewModel>(jsonString);
			return vmentity;
		}
		public async Task removeTelemetry(HttpClient client, int id)
		{
			await client.DeleteAsync("/api/telemetry/" + id.ToString());
		}

	}
	#endregion
}

