// <copyright file="5_t4ApiStartupAdditionsGenerate.cs" company="marcos software">
// This file may not be redistributed in whole or significant part
// and is subject to the marcos software license.
//
// @author: Sascha Manns, s.manns@marcossoftware.com
// @copyright: 2022, marcos-software, http://www.marcos-software.de
// </copyright>



// —————————————— 
// <auto-generated> 
//	This code was auto-generated 07/18/2022 12:21:44 
//  T4 template produces Startup additions
//	NOTE:T4 generated code may need additional updates/addjustments by developer in order to compile a solution.
// <auto-generated> 
// —————————————–
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Microsoft.EntityFrameworkCore;
using System.Text;
using Microsoft.IdentityModel.Tokens;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using AppLicenseserver.Api;
using AppLicenseserver.Entity.UnitofWork;
using AppLicenseserver.Entity.Context;
using AppLicenseserver.Entity.Repository;
using AutoMapper;
using AppLicenseserver.Domain.Mapping;
using AppLicenseserver.Domain.Service;
using System.Net;
using Microsoft.AspNetCore.Diagnostics;
using Microsoft.AspNetCore.Http;
using Serilog;
using Swashbuckle.AspNetCore.Swagger;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json.Serialization;
using Microsoft.OpenApi.Models;
using Microsoft.AspNetCore.Mvc.ApplicationModels;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Versioning;
using Microsoft.AspNetCore.Mvc.ApiExplorer;


namespace AppLicenseserver.Api
{

	public partial class Startup
	{
		// Register new services to DI
		partial void SetAdditionalDIServices(IServiceCollection services)
		{
			services.AddTransient(typeof(LicenseService<,>), typeof(LicenseService<,>));
			services.AddTransient(typeof(LicenseServiceAsync<,>), typeof(LicenseServiceAsync<,>));
			services.AddTransient(typeof(ProductService<,>), typeof(ProductService<,>));
			services.AddTransient(typeof(ProductServiceAsync<,>), typeof(ProductServiceAsync<,>));
			services.AddTransient(typeof(TelemetryService<,>), typeof(TelemetryService<,>));
			services.AddTransient(typeof(TelemetryServiceAsync<,>), typeof(TelemetryServiceAsync<,>));
		}
	}
}